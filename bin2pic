#!/usr/bin/env python3

"""
bin2pic

Create a simple pictorial represenation of a file showing sections
of 0's, 1's and mixed data. Used to examine memory dumps.

"""

import sys
import math

SEEK_SET = 0
SEEK_END = 2

cols_max = 70.0
factor = 1.0


def analyze(f, ofs, length):
    """ "return a character representing the file contents from ofs to ofs + len - 1"""
    f.seek(ofs, SEEK_SET)
    buf = f.read(length)
    if len(buf) == 0:
        return " "
    v0 = buf[0]
    if v0 == 0:
        c = "-"
    elif v0 == 0xFF:
        c = "."
    else:
        return "$"
    for vn in buf:
        if vn != v0:
            return "$"
    return c


def process(name):
    try:
        f = open(name, "rb")
    except IOError(errno, error):
        if errno == 2:
            print("%s: %s" % (name, error))
            return
        else:
            raise e

    # get the file size
    f.seek(0, SEEK_END)
    size = f.tell()

    cols = cols_max + 1
    bps = 1
    while cols > cols_max:
        bps *= 2
        cols = int(math.sqrt(float(size) / (factor * float(bps))))

    rows = int(math.ceil(size / (float(cols) * float(bps))))
    bpr = cols * bps

    print("'.' all ones, '-' all zeroes, '$' various")
    print("%d (0x%x) bytes per symbol" % (bps, bps))
    print("%d (0x%x) bytes per row" % (bpr, bpr))
    print("%d cols x %d rows" % (cols, rows))

    ofs = 0
    for y in range(rows):
        row_str = []
        print("0x%08x: " % ofs, end="")
        for x in range(cols):
            row_str.append(analyze(f, ofs, bps))
            ofs += bps
        print("%s" % "".join(row_str))

    f.close()


def main(args):
    if len(args) == 1:
        process(args[0])
    else:
        print("usage: bin2pic [file]")


if __name__ == "__main__":
    main(sys.argv[1:])
