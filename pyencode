#!/usr/bin/env python3

"""

Encode a binary file as a python program.
Running the python program will re-create the file.

"""

import datetime
import argparse
import sys
import os
import base64
import zlib

MAXCHUNK = 128


def pr_error(msg):
    """log an error message - exit 1"""
    ts = datetime.datetime.utcnow()
    print(f"{ts} error: {msg}")
    sys.exit(1)


def check_file(path, opt):
    """check that a file exists"""
    if path is None:
        pr_error(f"specify the {opt} option")
    if not os.path.isfile(path):
        pr_error(f'{opt} file "{path}" does not exist')


def main():
    """pyencode entry point"""
    parser = argparse.ArgumentParser(description="encode a binary file as a python program")
    parser.add_argument("<file>", type=str, nargs=1, help="binary input filename")
    parser.add_argument("--binary_out", metavar="<file>", help="binary output filename")
    parser.add_argument("--python_out", metavar="<file>", help="python output filename")
    args = vars(parser.parse_args())

    binary_in = args["<file>"][0]
    check_file(binary_in, "binary input")

    python_out = args["python_out"]
    if python_out is None:
        python_out = binary_in + ".py"

    binary_out = args["binary_out"]
    if binary_out is None:
        binary_out = binary_in

    # read and encode the binary data
    with open(binary_in, mode="rb") as f:
        indata = f.read()
        f.close()
    csum = zlib.adler32(indata)
    outdata = base64.b64encode(indata)
    chunks = "\\\n".join([str(outdata[i : i + MAXCHUNK]) for i in range(0, len(outdata), MAXCHUNK)])

    with open(python_out, mode="w", encoding="utf-8") as f:
        f.write("#!/usr/bin/env python3\n")
        f.write("import base64\n")
        f.write("import zlib\n")
        f.write("import sys\n")
        f.write(f"data0={chunks}\n")
        f.write("data1=base64.b64decode(data0)\n")
        f.write(f"if zlib.adler32(data1) != 0x{csum:08x}:\n")
        f.write('\tsys.exit("error: bad checksum")\n')
        f.write(f'f=open("{binary_out}", mode="wb")\n')
        f.write("f.write(data1)\n")
        f.write("f.close()\n")
        f.close()


main()
