#!/usr/bin/env python3

import datetime
import argparse
import sys
import os
import string


def pr_error(msg):
    """log an error message - exit 1"""
    ts = datetime.datetime.utcnow()
    print("%s error: %s" % (ts, msg))
    sys.exit(1)


def check_file(path, opt):
    if path is None:
        pr_error("specify the %s option" % opt)
    if not os.path.isfile(path):
        pr_error('%s file "%s" does not exist' % (opt, path))


allowed = set("0123456789abcdefABCDEF ")


def is_hex(s):
    return all(c in allowed for c in s)


def main():
    parser = argparse.ArgumentParser(
        description='decode a "hexdump -x" file to a binary output file'
    )
    parser.add_argument("<file>", type=str, nargs=1, help="hex input filename")
    parser.add_argument("--binary_out", metavar="<file>", help="binary output filename")
    args = vars(parser.parse_args())

    hex_in = args["<file>"][0]
    check_file(hex_in, "hex input")

    binary_out = args["binary_out"]
    if binary_out is None:
        binary_out = hex_in + ".bin"

    print(hex_in)
    print(binary_out)

    # read the hex data
    f = open(hex_in, mode="r")
    indata = f.read()
    f.close()

    n = 1
    outdata = []

    for l in indata.splitlines():
        if not is_hex(l):
            pr_error("non hex character at line %d" % n)
        data = l.split()
        k = len(data)
        if k == 0 or k == 1:
            # empty line or address only
            pass
        elif k > 9:
            pr_error("too much data at line %d" % n)
        else:
            if len(data[0]) != 7:
                pr_error("bad address length at line %d" % n)
            addr = int(data[0], 16)
            for i in range(k - 1):
                if len(data[i + 1]) != 4:
                    pr_error("bad word length at line %d" % n)
                word = int(data[1 + i], 16)
                outdata.append(word & 0xFF)
                outdata.append(word >> 8)
        n += 1

    f = open(binary_out, mode="wb")
    f.write(bytes(outdata))
    f.close()


main()
