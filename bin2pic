#!/usr/bin/env python3

"""
bin2pic

Create a simple pictorial representation of a file showing sections
of 0's, 1's and mixed data. Used to examine memory dumps.

"""

import sys
import math
import os
import datetime
import argparse

SEEK_SET = 0
SEEK_END = 2

COLS_MAX = 70.0
FACTOR = 1.0

KiB = 1 << 10
MiB = 1 << 20
GiB = 1 << 30


def memsize(s):
    """return a string for the memory size"""
    if (s >= GiB) and (s & (GiB - 1) == 0):
        return f"{int(s / GiB)} GiB"
    if (s >= MiB) and (s & (MiB - 1) == 0):
        return f"{int(s / MiB)} MiB"
    if (s >= KiB) and (s & (KiB - 1) == 0):
        return f"{int(s / KiB)} KiB"
    return f"{s} B"


def pr_error(msg):
    """log an error message - exit 1"""
    ts = datetime.datetime.utcnow()
    print(f"{ts} error: {msg}")
    sys.exit(1)


def check_file(path, opt):
    """check that a file exists"""
    if path is None:
        pr_error(f"specify the {opt} option")
    if not os.path.isfile(path):
        pr_error(f'{opt} file "{path}" does not exist')


def analyze(f, ofs, length):
    """return a character representing the file contents from ofs to ofs + len - 1"""
    f.seek(ofs, SEEK_SET)
    buf = f.read(length)
    if len(buf) == 0:
        return " "
    v0 = buf[0]
    if v0 == 0:
        c = "-"
    elif v0 == 0xFF:
        c = "."
    else:
        return "$"
    for vn in buf:
        if vn != v0:
            return "$"
    return c


def gen_picture(path, f, ofs):
    """generate the binary picture map"""

    # get the file size
    f.seek(0, SEEK_END)
    size = f.tell()

    cols = COLS_MAX + 1
    bps = 1
    while cols > COLS_MAX:
        bps *= 2
        cols = int(math.sqrt(float(size) / (FACTOR * float(bps))))

    rows = int(math.ceil(size / (float(cols) * float(bps))))
    bpr = cols * bps

    print(f"{path}: {memsize(size)}")
    print(f"{bps} (0x{bps:x}) bytes per symbol")
    print(f"{bpr} (0x{bpr:x}) bytes per row")
    print(f"{cols} cols x {rows} rows")

    for y in range(rows):
        row_str = []
        print(f"0x{ofs:08x}: ", end="")
        for x in range(cols):
            row_str.append(analyze(f, ofs, bps))
            ofs += bps
        print("".join(row_str))

    print("'.' all ones, '-' all zeroes, '$' various")


def auto_int(x):
    """convert the command line integer arguments"""
    return int(x, 0)


def main():
    """bin2pic entry point"""
    parser = argparse.ArgumentParser(description="output a pictorial map of a binary file")
    parser.add_argument("<file>", type=str, nargs=1, help="binary input filename")
    parser.add_argument("--ofs", metavar="<n>", type=auto_int, nargs=1, help="offset address")
    args = vars(parser.parse_args())

    binary_in = args["<file>"][0]
    check_file(binary_in, "binary input")

    ofs = 0
    if args["ofs"] is not None:
        ofs = args["ofs"][0]

    with open(binary_in, "rb") as f:
        gen_picture(binary_in, f, ofs)
        f.close()


main()
